// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WheelOfFortune.Data.DbContexts;

#nullable disable

namespace FortuneWheel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240514124827_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WheelOfFortune.Domain.Auth.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WheelOfFortune.Domain.Auth.UnconfirmedEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnconfirmedEmails");
                });

            modelBuilder.Entity("WheelOfFortune.Domain.Segments.Segment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassicWheelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassicWheelId");

                    b.ToTable("Segments", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WheelOfFortune.Domain.WheelsOfFortune.ClassicWheel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemainingOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ClassicWheels");
                });

            modelBuilder.Entity("WheelOfFortune.Domain.WheelsOfFortune.PointWheel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemainingOptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PointWheels");
                });

            modelBuilder.Entity("WheelOfFortune.Domain.Segments.PointSegment", b =>
                {
                    b.HasBaseType("WheelOfFortune.Domain.Segments.Segment");

                    b.Property<Guid?>("PointWheelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.HasIndex("PointWheelId");

                    b.ToTable("PointSegments", (string)null);
                });

            modelBuilder.Entity("WheelOfFortune.Domain.Segments.Segment", b =>
                {
                    b.HasOne("WheelOfFortune.Domain.WheelsOfFortune.ClassicWheel", null)
                        .WithMany("Segments")
                        .HasForeignKey("ClassicWheelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WheelOfFortune.Domain.Segments.PointSegment", b =>
                {
                    b.HasOne("WheelOfFortune.Domain.Segments.Segment", null)
                        .WithOne()
                        .HasForeignKey("WheelOfFortune.Domain.Segments.PointSegment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WheelOfFortune.Domain.WheelsOfFortune.PointWheel", null)
                        .WithMany("Segments")
                        .HasForeignKey("PointWheelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WheelOfFortune.Domain.WheelsOfFortune.ClassicWheel", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("WheelOfFortune.Domain.WheelsOfFortune.PointWheel", b =>
                {
                    b.Navigation("Segments");
                });
#pragma warning restore 612, 618
        }
    }
}
