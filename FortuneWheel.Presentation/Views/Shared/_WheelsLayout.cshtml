@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Wheel of fortune</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/main.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/wheel-settings.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/spin-wheel.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/settings.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/FortuneWheel.Presentation.styles.css" asp-append-version="true" />
</head>
<body class="bg-dark text-light">    
    <div class="main-container">

        <ul class="menu" data-navigation="true">
            <li class="@(ViewContext.RouteData.Values["Action"].ToString() == "About" ? "bg-primary text-light" : "")">
                <a class="@(ViewContext.RouteData.Values["Action"].ToString() == "About" ? "text-light" : "text-primary")" href="@Url.Action("About", "Home")">@Localizer["About"]</a>
            </li>

            <li class="@(ViewContext.RouteData.Values["Action"].ToString() == "GetAll" ? "bg-primary text-light" : "")">
                <a class="@(ViewContext.RouteData.Values["Action"].ToString() == "GetAll" ? "text-light" : "text-primary")" href="@Url.Action("GetAll", "Wheel")">@Localizer["Get all"]</a>
            </li>

            <li class="@((ViewContext.RouteData.Values["Action"].ToString() == "Options"
                || ViewContext.RouteData.Values["Action"].ToString() == "Select") ? "bg-primary text-light" : "")">
                <a class="@(ViewContext.RouteData.Values["Action"].ToString() == "Options" ? "text-light" : "text-primary")" href="@Url.Action("Options", "Wheel")">@Localizer["Options"]</a>
            </li>

            <li class="@(ViewContext.RouteData.Values["Action"].ToString() == "Load" ? "bg-primary text-light" : "")">
                <a class="@(ViewContext.RouteData.Values["Action"].ToString() == "Load" ? "text-light" : "text-primary")" href="@Url.Action("Load", "Wheel")">@Localizer["Wheel of fortune"]</a>
            </li>

            @if (User.Identity.IsAuthenticated)
            {
                <li class="@(ViewContext.RouteData.Values["Action"].ToString() == "Settings" ? "bg-primary text-light" : "")">
                    <a class="@(ViewContext.RouteData.Values["Action"].ToString() == "Settings" ? "text-light" : "text-primary")" href="@Url.Action("Settings", "Home")">@Localizer["Settings"]</a>
                </li>

                <li class="@(ViewContext.RouteData.Values["Action"].ToString() == "Logout" ? "bg-primary text-light" : "")">
                    <a class="@(ViewContext.RouteData.Values["Action"].ToString() == "Logout" ? "text-light" : "text-primary")" href="@Url.Action("Logout", "Auth")">@Localizer["Logout"]</a>
                </li>
            }
            else
            {
                <li class="@(ViewContext.RouteData.Values["Action"].ToString() == "Login" ? "bg-primary text-light" : "")">
                    <a class="@(ViewContext.RouteData.Values["Action"].ToString() == "Login" ? "text-light" : "text-primary")" href="@Url.Action("Login", "Auth")">@Localizer["Login"]</a>
                </li>
            }
        </ul>


        <div class="main-page">
            <main role="main">
                @RenderBody()
            </main>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var theme = getCookie("Theme");
        var menuItems = document.querySelectorAll('.menu li');

        if (theme === "light") {
            menuItems.forEach(function (item) {
                item.addEventListener('mouseover', function () {
                    this.classList.add('light-hover');
                });
                item.addEventListener('mouseout', function () {
                    this.classList.remove('light-hover');
                });
            });
        } else {
            menuItems.forEach(function (item) {
                item.addEventListener('mouseover', function () {
                    this.classList.add('dark-hover');
                });
                item.addEventListener('mouseout', function () {
                    this.classList.remove('dark-hover');
                });
            });
        }
    });

</script>